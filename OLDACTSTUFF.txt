# used to calculate repeated days
  DAY_VALUES = {0 => 2, 1 => 3, 2 => 5, 3 => 7, 4 => 11, 5 => 13, 6 => 17}

  # generate repeated activities for the week or from start date
  def gen_reps(start = 0, weeks = [0])
    if repeated.nil?
      return
    end
    today_wday = Date.today.wday
    DAY_VALUES.each do |k,v|
      weeks.each do |week|
        if (k + (week * 7)) >= start
          if is_repeated_day(k)
            diff = k - today_wday
            new_act = dup
            new_act.due_date = Date.today.advance(:days => (diff + (7 * week)))
            new_act.repeated = nil
            repititions << new_act
            new_act.save
          end
        end
      end
    end
  end

  # delete repeated events following the current day
  def del_reps
    repititions.where("due_date > :date", date: Date.today).destroy_all
  end

  # returns true if the activty should occur on the day specified by day_in
  def is_repeated_day(day_int)
    day_int = DAY_VALUES[day_int]
    act_int = repeated

    if act_int.nil?
      act_int = 0
    end

    # is a repeated divides evenly the acitvity should occur on that day
    return (act_int % day_int) == 0
  end

  # takes an array of wday integers, days, and sets the repeated field
  def set_repeated_value(days)
    if days.empty?
      return
    end
    new_days = Array.new
    days.each { |day| new_days << DAY_VALUES[day] }
    self[:repeated] = new_days.inject(:*)
    save
  end

  # returns array of wday ints that the activity occurs on
  def get_repeated_days
    if repeated.nil?
      return nil
    end

    days = Array.new
    DAY_VALUES.each do |k,v|
      if (repeated % v) == 0
        days << k
      end
    end

    return days
  end

  # sets the parent activity of an activity
  def set_parent(parent_act = nil)
    
    
  end
