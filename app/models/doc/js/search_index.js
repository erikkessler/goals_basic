var search_data = {"index":{"searchIndex":["activity","fulltask","habit","partialtask","repeatable","add_child()","add_child()","children()","complete()","complete()","complete()","del_reps()","gen_reps()","get_repeated()","incomplete()","incomplete()","incomplete()","is_complete?()","is_complete?()","is_complete?()","is_repeated_day()","make_root()","make_root()","num_children()","outdent()","parent()","print_tree()","remove_act()","remove_act()","remove_act()","set_parent()","set_parent()","set_repeated()","total_payout()","total_payout()","total_penalty()","total_penalty()","total_reward()","total_reward()","week_payout()","week_payout()"],"longSearchIndex":["activity","fulltask","habit","partialtask","repeatable","activity#add_child()","repeatable#add_child()","repeatable#children()","activity#complete()","partialtask#complete()","repeatable#complete()","repeatable#del_reps()","repeatable#gen_reps()","repeatable#get_repeated()","activity#incomplete()","partialtask#incomplete()","repeatable#incomplete()","activity#is_complete?()","fulltask#is_complete?()","partialtask#is_complete?()","repeatable#is_repeated_day()","activity#make_root()","repeatable#make_root()","activity#num_children()","activity#outdent()","repeatable#parent()","activity#print_tree()","activity#remove_act()","habit#remove_act()","repeatable#remove_act()","activity#set_parent()","repeatable#set_parent()","repeatable#set_repeated()","activity#total_payout()","repeatable#total_payout()","activity#total_penalty()","repeatable#total_penalty()","activity#total_reward()","repeatable#total_reward()","activity#week_payout()","repeatable#week_payout()"],"info":[["Activity","","Activity.html","","<p>An activity acts as the base object for the task manager, it is designed to\nbe exended by other classes …\n"],["FullTask","","FullTask.html","","<p>This type of Activity is complete iff all its chilren are complete. If no\nchildren just returns if its …\n"],["Habit","","Habit.html","","<p>This type of repeatable is nearly idenitcal to the vanilla repeatable\nexecpt that when remove_act is …\n"],["PartialTask","","PartialTask.html","","<p>This type of activity is completly isolated from its children in terms of\nbeing complete\n"],["Repeatable","","Repeatable.html","","<p>A subclass of Activity that allows for repeated events. Methods to generate\nthe repeated tasks and manipulate …\n"],["add_child","Activity","Activity.html#method-i-add_child","(child)","<p>adds a child the activity\n"],["add_child","Repeatable","Repeatable.html#method-i-add_child","(child)","<p>add child to the rep_parent\n"],["children","Repeatable","Repeatable.html#method-i-children","()","<p>if a rep parent returns the children if a rep returns the child activities\nwith the same date\n"],["complete","Activity","Activity.html#method-i-complete","()","<p>set activity&#39;s state to complete and call complete on all children\n"],["complete","PartialTask","PartialTask.html#method-i-complete","()","<p>marks the task and only the task as complete\n"],["complete","Repeatable","Repeatable.html#method-i-complete","()","<p>marks complete if child or marks rep of the day updates count of rep parent\ndoes not impact children …\n"],["del_reps","Repeatable","Repeatable.html#method-i-del_reps","(start_date = Date.tomorrow)","<p>deletes reps past date defults to deleting starting tomorrow\n"],["gen_reps","Repeatable","Repeatable.html#method-i-gen_reps","(start_date = Date.current, end_date = Date.current.advance(:weeks => 1), period = 1)","<p>generates reps for the given range period is the number of days in the\nfuture to set the expiration date …\n"],["get_repeated","Repeatable","Repeatable.html#method-i-get_repeated","()","<p>returns array corresponding to wdays\n"],["incomplete","Activity","Activity.html#method-i-incomplete","()","<p>set activity&#39;s state to incomplete and call on all children\n"],["incomplete","PartialTask","PartialTask.html#method-i-incomplete","()","<p>marks the task and only the task as incomplete\n"],["incomplete","Repeatable","Repeatable.html#method-i-incomplete","()","<p>marks incomplete if child or marks reps of day updates count of rep_parent\ndoes not impact children\n"],["is_complete?","Activity","Activity.html#method-i-is_complete-3F","()","<p>returns whether or not the activity is complete if any child is incomplete\nit returns false\n"],["is_complete?","FullTask","FullTask.html#method-i-is_complete-3F","()","<p>if children complete iff all children are\n"],["is_complete?","PartialTask","PartialTask.html#method-i-is_complete-3F","()","<p>returns state of task in isolation\n"],["is_repeated_day","Repeatable","Repeatable.html#method-i-is_repeated_day","(day_int)","<p>returns true if repeated act should show on that day\n"],["make_root","Activity","Activity.html#method-i-make_root","()","<p>move to root\n"],["make_root","Repeatable","Repeatable.html#method-i-make_root","()","<p>moves task to be on its own\n"],["num_children","Activity","Activity.html#method-i-num_children","()","<p>returns number of sub activities\n"],["outdent","Activity","Activity.html#method-i-outdent","()","<p>move out one level\n"],["parent","Repeatable","Repeatable.html#method-i-parent","()","<p>override parent method always return parent of rep_parent\n"],["print_tree","Activity","Activity.html#method-i-print_tree","(level = 0)","<p>prints the tree\n"],["remove_act","Activity","Activity.html#method-i-remove_act","()","<p>removes activity and calls remove on children\n"],["remove_act","Habit","Habit.html#method-i-remove_act","()","<p>Sets state to ARCHIVED_HABIT, deletes all future reps, and calls remove_act\non children\n"],["remove_act","Repeatable","Repeatable.html#method-i-remove_act","()","<p>deletes the rep_parent, all the reps, and children\n"],["set_parent","Activity","Activity.html#method-i-set_parent","(new_parent)","<p>removes association to old parent and adds new one\n"],["set_parent","Repeatable","Repeatable.html#method-i-set_parent","(new_parent)","<p>sets parent of the rep_parent\n"],["set_repeated","Repeatable","Repeatable.html#method-i-set_repeated","(days)","<p>takes an array of wdays and sets repeated\n"],["total_payout","Activity","Activity.html#method-i-total_payout","()","<p>calculate total payout if completed then the reward if expired then penalty\n"],["total_payout","Repeatable","Repeatable.html#method-i-total_payout","()","<p>returns total payout of repititions\n"],["total_penalty","Activity","Activity.html#method-i-total_penalty","(start_date = nil, end_date = nil)","<p>returns total possible penalty\n"],["total_penalty","Repeatable","Repeatable.html#method-i-total_penalty","(start_date = nil, end_date = nil)","<p>returns the total possible penalty for period ifno period specified then\nchecks all reps\n"],["total_reward","Activity","Activity.html#method-i-total_reward","(start_date = nil, end_date = nil)","<p>returns total possible reward start and end_date allow you to specify a\nrange\n"],["total_reward","Repeatable","Repeatable.html#method-i-total_reward","(start_date = nil, end_date = nil)","<p>returns the total possible reward for the period specified if no period\nspecifed then checks all reps …\n"],["week_payout","Activity","Activity.html#method-i-week_payout","(date = Date.current, start_day = \"monday\")","<p>calculates payout for the week of the specified date start_day allows you\nto specify what day to start …\n"],["week_payout","Repeatable","Repeatable.html#method-i-week_payout","(date = Date.current, start_day = \"monday\")","<p>payout for the specified week date specifies which week want to check\nstart_day specifies day of week …\n"]]}}